/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */
 


// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
sourceCompatibility = 1.8 //tested with version 1.8.0_191
targetCompatibility = 1.8
//apply plugin: 'eclipse' //is in eclipse-wtp
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'com.bmuschko.tomcat' //https://github.com/bmuschko/gradle-tomcat-plugin

buildscript {

    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.5'
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
     jcenter()
    //    mavenLocal()
       mavenCentral()
     // maven {
     //       url 'https://mvnrepository.com'
    //    }
}


dependencies {
	//dummies from building new project
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //implementation 'com.google.guava:guava:23.0'
    // https://mvnrepository.com/artifact/org.glassfish.jersey.media/jersey-media-multipart
	compile 'org.glassfish.jersey.media:jersey-media-multipart:2.+' 
    		
    		 
   

	

	
	
	//SOAP
	//is in java 1.8
	
	//providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
	
	//api 'javax.xml.ws:jaxws-api:2.3.1'

	//api 'com.sun.xml.ws:jaxws-rt:2.0'
	//api 'com.sun.xml.ws:jaxws-ri:2.3.1'

	//api 'javax.jws:javax.jws-api:1.1'
	//api 'javax.ws.rs:jsr311-api:1.1'

	//api 'javax.xml.bind:jaxb-api:2.3.1'
	//api 'com.sun.xml.bind:jaxb-core:2.3.0.1'
	//api 'com.sun.xml.bind:jaxb-impl:2.3.1'
	//api 'javax.activation:activation:1.1.1'
	
	//for REST
	providedCompile 'javax.servlet:javax.servlet-api:4.0.0'
	providedCompile 'javax.servlet.jsp:javax.servlet.jsp-api:2.3.3'

	api 'org.glassfish.jersey.media:jersey-media-json-jackson:2.26'
	implementation 'org.glassfish.jersey.core:jersey-server:2.26'
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.26'
    implementation 'org.glassfish.jersey.core:jersey-common:2.26'
	implementation 'org.glassfish.jersey.inject:jersey-hk2:2.26'

	//Logging stuff
	api 'org.apache.logging.log4j:log4j-core:2.11.1'
	api 'org.apache.logging.log4j:log4j-api:2.11.1'
	
	//image libraries
	//https://github.com/bytedeco/javacv
	//go and drink some coffee if you load this - it takes a long time
	implementation 'org.bytedeco:javacv-platform:1.4.3'
	
	
	//multipart form stuff
	implementation 'org.glassfish.jersey.media:jersey-media-multipart:2.27'
	implementation 'org.jvnet.mimepull:mimepull:1.9.10'

	
	//video libraries
	



    // Use JUnit test framework
    /*
    	note for testing:
    		0. context menu > Refresh gradle project
    		0a. check if tomcat at 8080 has a favicon or else tests fail
    		1. build project (build -x test) to skip tests (tests will fail without tomcat)
    		2. run tomcat (tomcatRun)
    		3. do the tests
    		4. stop tomcat (tomcatStop)
    */
    testImplementation 'junit:junit:4.12'
    testImplementation 'io.rest-assured:rest-assured:3.0.3'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    
}

//tomcat stuff for com.bmuschko.tomcat
dependencies {
    def tomcatVersion = '9.0.12'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
           "org.apache.tomcat.embed:tomcat-embed-logging-juli:9.0.0.M6",
           "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
}

tomcat {
    httpProtocol = 'org.apache.coyote.http11.Http11Nio2Protocol'
    ajpProtocol  = 'org.apache.coyote.ajp.AjpNio2Protocol'
}


/*
war {
	from 'src/main/webapp/WEB-INF/favicon.ico' // adds a file-set to the root of the archive
    from 'src/rootContent' // adds a file-set to the root of the archive
    webInf { from 'src/additionalWebInf' } // adds a file-set to the WEB-INF dir.
    classpath fileTree('additionalLibs') // adds a file-set to the WEB-INF/lib dir.
    //classpath configurations.moreLibs // adds a configuration to the WEB-INF/lib dir.
    webXml = file('src/someWeb.xml') // copies a file to WEB-INF/web.xml
    
}*/
